"use strict";
///<reference path="e:/tsdefination/node/node.d.ts" />
var fs = require('fs');
var ctx = (function () {
    function ctx() {
        this.FT_getExtension = 0;
        this.FT_createBuffer = 1;
        this.FT_bindBuffer = 2;
        this.FT_bufferData_vector = 3;
        this.FT_bufferData_size = 4;
        this.FT_createShader = 5;
        this.FT_shaderSource = 6;
        this.FT_compileShader = 7;
        this.FT_getShaderParameter = 8;
        this.FT_createProgram = 9;
        this.FT_attachShader = 10;
        this.FT_linkProgram = 11;
        this.FT_getProgramParameter = 12;
        this.FT_useProgram = 13;
        this.FT_getUniformLocation = 14;
        this.FT_getAttribLocation = 15;
        this.FT_disable = 16;
        this.FT_enable = 17;
        this.FT_colorMask = 18;
        this.FT_viewport = 19;
        this.FT_clear = 20;
        this.FT_clearColor = 21;
        this.FT_createTexture = 22;
        this.FT_bindTexture = 23;
        this.FT_pixelStorei = 24;
        this.FT_texImage2D_06 = 25;
        this.FT_texImage2D_09 = 26;
        this.FT_texSubImage2D = 27;
        this.FT_texParameterf = 28;
        this.FT_texParameteri = 29;
        this.FT_activeTexture = 30;
        this.FT_getShaderInfoLog = 31;
        this.FT_uniform1f = 32;
        this.FT_uniform1i = 33;
        this.FT_uniform2f = 34;
        this.FT_uniform2i = 35;
        this.FT_uniform3f = 36;
        this.FT_uniform3i = 37;
        this.FT_uniform4f = 38;
        this.FT_uniform4i = 39;
        this.FT_uniform1fv = 40;
        this.FT_uniform1iv = 41;
        this.FT_uniform2fv = 42;
        this.FT_uniform2iv = 43;
        this.FT_uniform3fv = 44;
        this.FT_uniform3iv = 45;
        this.FT_uniform4fv = 46;
        this.FT_uniform4iv = 47;
        this.FT_uniformMatrix2fv = 48;
        this.FT_uniformMatrix3fv = 49;
        this.FT_uniformMatrix4fv = 50;
        this.FT_vertexAttribPointer = 51;
        this.FT_enableVertexAttribArray = 52;
        this.FT_blendFunc = 53;
        this.FT_bufferSubData = 54;
        this.FT_drawElements = 55;
        this.FT_deleteTexture = 56;
        this.FT_drawArrays = 57;
        this.FT_bindAttribLocation = 58;
        this.FT_cullFace = 59;
        this.FT_createFramebuffer = 60;
        this.FT_getParameter = 61;
        this.FT_bindFramebuffer = 62;
        this.FT_depthFunc = 63;
        this.FT_depthMask = 64;
        this.FT_depthRange = 65;
        this.FT_stencilFunc = 66;
        this.FT_stencilMask = 67;
        this.FT_stencilOp = 68;
        this.FT_deleteBuffer = 69;
        this.FT_deleteFramebuffer = 70;
        this.FT_deleteProgram = 71;
        this.FT_deleteRenderbuffer = 72;
        this.FT_deleteShader = 73;
        this.FT_isBuffer = 74;
        this.FT_disableVertexAttribArray = 75;
        this.FT_scissor = 76;
        this.FT_generateMipmap = 77;
        this.FT_framebufferTexture2D = 78;
        this.FT_checkFramebufferStatus = 79;
        this.FT__bindShaderFetchRT = 80;
        this.FT__renderMesh1RT = 81;
        this.FT_setTextureInvalidFunc = 82;
        this.FT_FINISH = 0xffffffff;
        this.TYPE_IMAGE = 0;
        this.TYPE_CANVAS = 1;
        this.TYPE_MEMORY_CANVAS = 2;
        this.TYPE_TEXT_CANVAS = 3;
    }
    return ctx;
}());
var dt = new ctx();
var file = 'E:/conch4/trunk/Conch4/source/domsupport/WebGL.ts';
var fc = fs.readFileSync(file, 'utf8');
for (var v in dt) {
    console.log(v + ',' + dt[v]);
    fc = fc.replace(new RegExp('WebGLRenderingContext.' + v + '\\)', 'g'), "/*WebGLRenderingContext." + v + "*/" + dt[v] + ")");
    fc = fc.replace(new RegExp('WebGLRenderingContext.' + v + '\\,', 'g'), "/*WebGLRenderingContext." + v + "*/" + dt[v] + ",");
}
fs.writeFileSync('E:/conch4/trunk/Conch4/source/domsupport/WebGL1.ts', fc);
